service:
  name: serverless-job-manager

frameworkVersion: '>=1.44.1 <2.0.0'

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'stage'}
  profile: ${opt:profile, 'gasbuddy-staging'}
  region: us-east-1
  logs:
    restApi: true
  environment:
    # NOTE: this is useful for local invocations and has no affect in deployed environments
    AWS_PROFILE: ${self:provider.profile}
    STACK_NAME: ${self:service.name}-${self:provider.stage}
    STATE_MACHINE_ARN_EXECUTE_JOB: ${self:resources.Outputs.ExecuteJobExecutionStateMachineARN.Value}
    STATE_MACHINE_ARN_UPDATE_JOB: ${self:resources.Outputs.UpdateJobStateMachineARN.Value}
    CLOUDWATCH_EVENTS_RULE_PREFIX: sjm.
    DYNAMODB_TABLE_NAME_JOBS: ${self:custom.dynamodb_table_name_jobs}
    DYNAMODB_INDEX_NAME_JOBS_GUID: ${self:custom.dynamodb_index_name_jobs_guid}
    # DYNAMODB_INDEX_NAME_JOBS_SCHEDULE: ${self:custom.dynamodb_index_name_jobs_schedule}
    DYNAMODB_TABLE_NAME_JOB_EXECUTIONS: ${self:custom.dynamodb_table_name_job_executions}
    DYNAMODB_PARTITION_COUNT_JOB_EXECUTIONS: 8
    # IAM_ROLE_ARN_STATE_MACHINE_EXECUTION:
    #   Fn::GetAtt: [ IamRoleStateMachineExecution, Arn ]
    API_BASE:
      Fn::Join:
        - ""
        - - "https://"
          - Ref: ApiGatewayRestApi
          - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - Ref: ExecuteJobExecution
        - Ref: ExecutionCallback
        - Ref: UpdateJob
    - Effect: Allow
      Action:
        - states:DescribeExecution
      Resource:
        - arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:execution:updateJob:*
    - Effect: Allow
      Action:
        - states:SendTask*
      Resource:
        - arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:executeJobExecution
    - Effect: Allow
      Action: iam:PassRole
      Resource:
        -  arn:aws:iam::#{AWS::AccountId}:role/${self:custom.iam_role_name_cloudwatch_events}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - Fn::GetAtt: [ JobsDynamoDbTable, Arn ]
        - Fn::GetAtt: [ JobExecutionsDynamoDbTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - Fn::Join:
            - ""
            - - Fn::GetAtt: [ JobsDynamoDbTable, Arn ]
              - "/index/${self:custom.dynamodb_index_name_jobs_guid}"
    - Effect: Allow
      Action:
        - events:RemoveTargets
        - events:PutTargets
        - events:PutRule
        - events:DeleteRule
        - events:DescribeRule
        - events:ListRules
      Resource:
        # use tag-based permissions?... something more secure than a string prefix?
        - arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:rule/${self:provider.environment.CLOUDWATCH_EVENTS_RULE_PREFIX}*
    - Effect: Allow
      Action:
        - events:ListRules
      Resource:
        # use tag-based permissions?... something more secure than a string prefix?
        - arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:rule/*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - ${self:custom.arn_prefix_lambda_function}-mockDelayedServiceExecutionCallback

plugins:
  # - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-webpack
  # - serverless-tag-cloud-watch-logs

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: npm
  cloudWatchLogsTags:
    DisableForwarding: "true"
  arn_prefix_lambda_function: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service.name}-${self:provider.stage}
  # serverless-iam-roles-per-function:
  #   defaultInherit: true
  dynamodb_table_name_jobs: ${self:service.name}-${self:provider.stage}-jobs
  dynamodb_table_name_job_executions: ${self:service.name}-${self:provider.stage}-job-executions
  dynamodb_index_name_jobs_guid: ${self:service.name}-${self:provider.stage}-jobs-guid
  # dynamodb_index_name_jobs_schedule: ${self:service.name}-${self:provider.stage}-jobs-schedule
  iam_role_name_cloudwatch_events: ${self:service.name}-${self:provider.stage}-cloudwatchevents

functions:
  # Step function task handlers
  mockDelayedServiceExecutionCallback:
    handler: src/deliveries/lambda/mock-delayed-service-execution-callback.delivery
    description: Posts to the callback endpoint after a random delay up to 3 seconds
    timeout: 10
  getJobKeyByGuid:
    handler: src/deliveries/lambda/get-job-key-by-guid.delivery
  getJobLock:
    description: For exclusive jobs, locks the job record and passes job attributes to next task
    handler: src/deliveries/lambda/get-job-lock.delivery
  getJob:
    description: For non-exclusive jobs, passes job attributes to next task
    handler: src/deliveries/lambda/get-job.delivery
  getJobExecutionByExecutionKey:
    handler: src/deliveries/lambda/get-job-execution-by-execution-key.delivery
  insertJobExecution:
    handler: src/deliveries/lambda/insert-job-execution.delivery
    description: Lambda that inserts the pending job execution into DynamoDB
  saveCallbackTaskToken:
    handler: src/deliveries/lambda/save-callback-task-token.delivery
    description: Updates the job execution record in DynamoDB with the callbackTaskToken
  invokeServiceExecution:
    handler: src/deliveries/lambda/invoke-service-execution.delivery
    description: Lambda that calls the invocation_target with the event details
  updateAwaitCallbackActivityStatus:
    handler: src/deliveries/lambda/update-await-callback-activity-status.delivery
    description: Lambda that calls updates the task status for the AwaitCallback activity
  updateJobWithExecutionResults:
    handler: src/deliveries/lambda/update-job-with-execution-results.delivery
  updateJobExecutionWithResults:
    handler: src/deliveries/lambda/update-job-execution-with-execution-results.delivery
  updateJobSchedule:
    handler: src/deliveries/lambda/update-job-schedule.delivery
  updateJobScheduleTargets:
    handler: src/deliveries/lambda/update-job-schedule-targets.delivery
    environment:
      IAM_ROLE_ARN_CLOUDWATCH_EVENTS:
        Fn::GetAtt: [ IamRoleCloudWatchEvents, Arn ]
  updateJobInsertJob:
    handler: src/deliveries/lambda/update-job-insert-job.delivery

  # API handlers
  searchJobsByService:
    handler: src/deliveries/lambda/search-jobs-by-service.delivery
    description: Read endpoint for jobs
    events:
      - http:
          path: services/{serviceName}/jobs
          method: get
      - http:
          path: services/{serviceName}/jobs
          method: post
  searchJobs:
    handler: src/deliveries/lambda/search-jobs.delivery
    description: Read endpoint for jobs
    events:
      - http:
          path: jobs
          method: get
      - http:
          path: jobs
          method: post

  searchJobExecutions:
    handler: src/deliveries/lambda/search-job-executions.delivery
    description: Read endpoint for job executions
    events:
      - http:
          path: executions
          method: get
      - http:
          path: services/{serviceName}/executions
          method: get
      - http:
          path: services/{serviceName}/jobs/{jobName}/executions
          method: get
      - http:
          path: executions
          method: post
      - http:
          path: services/{serviceName}/executions
          method: post
      - http:
          path: services/{serviceName}/jobs/{jobName}/executions
          method: post
  putJob:
    handler: src/deliveries/lambda/await-state-machine-execution.delivery
    description: Idempotent job create/update
    timeout: 30
    environment:
      STATE_MACHINE_ARN: ${self:resources.Outputs.UpdateJobStateMachineARN.Value}
    events:
      - http:
          path: services/{serviceName}/jobs/{jobName}
          method: put
          authorizer: aws_iam
          request:
            schema:
              application/json: ${file(src/lib/jsonschema/update-job-schedule.json)}
  deleteJob:
    handler: src/deliveries/lambda/delete-job.delivery
    description: Idempotent job delete
    events:
      - http:
          path: services/{serviceName}/jobs/{jobName}
          method: delete
          authorizer: aws_iam
  serviceExecutionCallback:
    handler: src/deliveries/lambda/service-execution-callback.delivery
    description: Endpoint for services to call with job results, starts and execution of the ExecutionCallback state machine
    environment:
      STATE_MACHINE_ARN_EXECUTION_CALLBACK: ${self:resources.Outputs.ExecutionCallbackStateMachineARN.Value}
    events:
      - http:
          path: callback/{jobGuid}/{encodedJobExecutionKey}
          method: post
          request:
            schema:
              application/json: ${file(src/lib/jsonschema/service-execution-callback.json)}
  mockHttpInvokeTarget:
    handler: src/deliveries/lambda/mock-http-invoke-target.delivery
    description: Endpoint for testing HTTP invoke target
    environment:
      LAMBDA_ARN_MOCK_DELAYED_CALLBACK: ${self:resources.Outputs.MockDelayedServiceExecutionCallbackLambdaFunctionARN.Value}
    events:
      - http:
          path: http-invoke
          method: post

stepFunctions:
  stateMachines:
    updateJobStepFunction:
      name: updateJob
      definition:
        StartAt: ValidateAndUpdateSchedule
        States:
          # TODO: separate validation from actions, use swagger
          ValidateAndUpdateSchedule:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-updateJobSchedule
            Catch:
            - ErrorEquals: ["States.ALL"]
              ResultPath: $
              Next: UpdateJobFailed
            Next: PutTargets
          PutTargets:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-updateJobScheduleTargets
            Catch:
            - ErrorEquals: ["States.ALL"]
              ResultPath: $
              Next: UpdateJobFailed
            Next: InsertJob
          InsertJob:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-updateJobInsertJob
            Catch:
            - ErrorEquals: ["States.ALL"]
              ResultPath: $
              Next: UpdateJobFailed
            End: true
          UpdateJobFailed:
            Type: Pass
            End: true

    executeJobExecutionStepFunction:
      name: executeJobExecution
      definition:
        Comment: Executes a job for the given CloudWatch Event Rule event
        StartAt: GetLockIfExclusive
        States:
          GetLockIfExclusive:
            Type: Choice
            Choices:
              - Variable: "$.jobStatic.exclusive"
                BooleanEquals: true
                Next: GetJobLock
              - Variable: "$.jobStatic.exclusive"
                BooleanEquals: false
                Next: GetJob
          GetJobLock:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-getJobLock
            Parameters:
              executionName.$: $$.Execution.Name
              executionInput.$: $$.Execution.Input
            ResultPath: $
            Retry:
            - ErrorEquals:
              - ConditionalCheckFailedException
              IntervalSeconds: 2
              MaxAttempts: 2
              BackoffRate: 2
            Next: InsertJobExecution
          GetJob:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-getJob
            Next: InsertJobExecution
          InsertJobExecution:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-insertJobExecution
            Parameters:
              executionName.$: $$.Execution.Name
              executionInput.$: $
            Next: AwaitCallback
          AwaitCallback:
            Type: Parallel
            Next: FinishCallback
            Branches:
              - StartAt: SaveCallbackTaskToken
                States:
                  SaveCallbackTaskToken:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
                    HeartbeatSeconds: 60
                    Parameters:
                      FunctionName: ${self:custom.arn_prefix_lambda_function}-saveCallbackTaskToken
                      Payload:
                        jobExecutionKey.$: $.jobExecution.key
                        callbackTaskToken.$: $$.Task.Token
                    End: true
              - StartAt: InvokeServiceExecution
                States:
                  InvokeServiceExecution:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-invokeServiceExecution
                    End: true
          FinishCallback:
            Type: Parallel
            Next: EndExecution
            Branches:
              - StartAt: UpdateJobWithExecutionResults
                States:
                  # TODO: use a Choice state and only run this if the job is exclusive
                  UpdateJobWithExecutionResults:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-updateJobWithExecutionResults
                    End: true
              - StartAt: UpdateJobExecutionWithExecutionResults
                States:
                  UpdateJobExecutionWithExecutionResults:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-updateJobExecutionWithResults
                    End: true
          EndExecution:
            Type: Pass
            End: true

    executionCallbackStepFunction:
      name: executionCallback
      definition:
        Comment: Processes the results of a service's job execution
        StartAt: GetJobAndExecution
        States:
          GetJobAndExecution:
            Type: Parallel
            Next: UpdateAwaitCallbackActivityStatus
            Branches:
              - StartAt: GetJobKeyByGuid
                States:
                  GetJobKeyByGuid:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-getJobKeyByGuid
                    Next: GetJob
                  GetJob:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-getJob
                    End: true
              - StartAt: GetJobExecutionByExecutionKey
                States:
                  GetJobExecutionByExecutionKey:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-getJobExecutionByExecutionKey
                    End: true
          UpdateAwaitCallbackActivityStatus:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-updateAwaitCallbackActivityStatus
            End: true

resources:
  Outputs:
    ExecuteJobExecutionStateMachineARN:
      Description: The ARN of the ExecuteJobExecution state machine
      Value:
        Ref: ExecuteJobExecution
    UpdateJobStateMachineARN:
      Description: The ARN of the UpdateJob state machine
      Value:
        Ref: UpdateJob
    ExecutionCallbackStateMachineARN:
      Description: The ARN of the ExecutionCallback state machine
      Value:
        Ref: ExecutionCallback
    MockDelayedServiceExecutionCallbackLambdaFunctionARN:
      Value:
        Fn::GetAtt: [ MockDelayedServiceExecutionCallbackLambdaFunction, Arn ]
  Resources:
    JobsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb_table_name_jobs}
        BillingMode: PAY_PER_REQUEST
        # StreamSpecification:
        #   StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: serviceName
            AttributeType: S
          - AttributeName: jobName
            AttributeType: S
          - AttributeName: guid
            AttributeType: S
        KeySchema:
          - AttributeName: serviceName
            KeyType: HASH
          - AttributeName: jobName
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamodb_index_name_jobs_guid}
            KeySchema:
              - AttributeName: guid
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
          # - IndexName: ${self:custom.dynamodb_index_name_jobs_schedule}
          #   KeySchema:
          #     - AttributeName: schedule
          #       KeyType: HASH
          #     - AttributeName: service_job
          #       KeyType: RANGE
          #   Projection:
          #     ProjectionType: KEYS_ONLY
    JobExecutionsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb_table_name_job_executions}
        BillingMode: PAY_PER_REQUEST
        # StreamSpecification:
        #   StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: partitionKey
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
        KeySchema:
          # `${DATE}.${parseInt(eventId.replace(/[^0-9a-fA-F]/g, '').substr(-13),16) % DYNAMODB_PARTITION_COUNT_JOB_EXECUTIONS}`
          # exmaple: 20190321.1
          - AttributeName: partitionKey
            KeyType: HASH
          # `${serviceName}:${jobName}:${eventTimeMs}:${eventId}`
          - AttributeName: sortKey
            KeyType: RANGE
    IamRoleCloudWatchEvents:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource:
                    - Ref: ExecuteJobExecution
        RoleName: ${self:custom.iam_role_name_cloudwatch_events}
