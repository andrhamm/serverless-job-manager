service:
  name: serverless-job-manager

frameworkVersion: '>=1.42.2 <2.0.0'

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'stage'}
  profile: ${opt:profile, 'gasbuddy-staging'}
  region: us-east-1
  environment:
    # NOTE: this is useful for local invocations and has no affect in deployed environments
    AWS_PROFILE: ${self:provider.profile}
    SERVICE_NAME: ${self:service.name}-${self:provider.stage}
    STATE_MACHINE_ARN_EXECUTE_JOB: ${self:resources.Outputs.ExecuteJobExecutionStateMachineARN.Value}
    STATE_MACHINE_ARN_QUEUE_JOB_EXECUTION: ${self:resources.Outputs.QueueJobExecutionStateMachineARN.Value}
    CLOUDWATCH_EVENTS_RULE_PREFIX: sjm.
    DYNAMODB_TABLE_NAME_JOBS: ${self:custom.dynamodb_table_name_jobs}
    DYNAMODB_INDEX_NAME_JOBS_GUID: ${self:custom.dynamodb_index_name_jobs_guid}
    # DYNAMODB_INDEX_NAME_JOBS_SCHEDULE: ${self:custom.dynamodb_index_name_jobs_schedule}
    DYNAMODB_TABLE_NAME_JOB_EXECUTIONS: ${self:custom.dynamodb_table_name_job_executions}
    DYNAMODB_PARTITION_COUNT_JOB_EXECUTIONS: 8
    # IAM_ROLE_ARN_STATE_MACHINE_EXECUTION:
    #   Fn::GetAtt: [ IamRoleStateMachineExecution, Arn ]
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource:
        - Ref: ExecuteJobExecution
        - Ref: ExecutionCallback
    - Effect: Allow
      Action:
        - states:sendTask*
      Resource:
        - arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:${self:custom.step_function_activity_name_await_callback}
    - Effect: Allow
      Action:
        - states:GetActivityTask
      Resource:
        - arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:${self:custom.step_function_activity_name_await_callback}
    - Effect: Allow
      Action: iam:PassRole
      Resource:
        -  arn:aws:iam::#{AWS::AccountId}:role/${self:custom.iam_role_name_cloudwatch_events}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
        - dynamodb:Query
      Resource:
        - Fn::GetAtt: [ JobsDynamoDbTable, Arn ]
        - Fn::GetAtt: [ JobExecutionsDynamoDbTable, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource:
        - Fn::Join:
            - ""
            - - Fn::GetAtt: [ JobsDynamoDbTable, Arn ]
              - "/index/${self:custom.dynamodb_index_name_jobs_guid}"
    - Effect: Allow
      Action:
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:
        - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.sqs_fifo_queue_name_job_execution_events}
    - Effect: Allow
      Action:
        - events:RemoveTargets
        - events:PutTargets
        - events:PutRule
        - events:DeleteRule
        - events:DescribeRule
        - events:ListRules
      Resource:
        # use tag-based permissions?... something more secure than a string prefix?
        - arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:rule/${self:provider.environment.CLOUDWATCH_EVENTS_RULE_PREFIX}*
    - Effect: Allow
      Action:
        - events:ListRules
      Resource:
        # use tag-based permissions?... something more secure than a string prefix?
        - arn:aws:events:#{AWS::Region}:#{AWS::AccountId}:rule/*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - ${self:custom.arn_prefix_lambda_function}-startExecutionWithEvent
        - ${self:custom.arn_prefix_lambda_function}-mockDelayedServiceExecutionCallback

plugins:
  # - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-webpack
  # - serverless-tag-cloud-watch-logs

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    packager: npm
  cloudWatchLogsTags:
    DisableForwarding: "true"

  arn_prefix_lambda_function: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service.name}-${self:provider.stage}
  # serverless-iam-roles-per-function:
  #   defaultInherit: true
  dynamodb_table_name_jobs: ${self:service.name}-${self:provider.stage}-jobs
  dynamodb_table_name_job_executions: ${self:service.name}-${self:provider.stage}-job-executions
  dynamodb_index_name_jobs_guid: ${self:service.name}-${self:provider.stage}-jobs-guid
  # dynamodb_index_name_jobs_schedule: ${self:service.name}-${self:provider.stage}-jobs-schedule
  sqs_fifo_queue_name_job_execution_events: ${self:service.name}-${self:provider.stage}-job-execution-events.fifo
  iam_role_name_cloudwatch_events: ${self:service.name}-${self:provider.stage}-cloudwatchevents
  step_function_activity_name_await_callback: ${self:service.name}-${self:provider.stage}-awaitCallback

functions:
  # Step function task handlers
  workExecutionQueue:
    handler: handlers/work-execution-queue.handler
    description: Lambda that pulls a single execution event off the FIFO queue and starts a job execution
    timeout: 30
    environment:
      SQS_QUEUE_URL_JOB_EXECUTION_EVENTS:
        Ref: JobExecutionEventsFifoSqsQueue
      LAMBDA_ARN_START_EXECUTION_WITH_EVENT: ${self:resources.Outputs.StartExecutionWithEventLambdaFunctionARN.Value}
  mockDelayedServiceExecutionCallback:
    handler: handlers/mock-delayed-service-execution-callback.handler
    description: Posts to the callback endpoint after a random delay
    timeout: 10
  startExecutionWithEvent:
    handler: handlers/start-execution-with-event.handler
    description: Lambda that receives the execution event starts the state machine execution.
  getJobKeyByGuid:
    handler: handlers/get-job-key-by-guid.handler
  getJobLock:
    description: For exclusive jobs, locks the job record and passes job attributes to next task
    handler: handlers/get-job-lock.handler
  getJob:
    description: For non-exclusive jobs, passes job attributes to next task
    handler: handlers/get-job.handler
  getJobExecutionByExecutionKey:
    handler: handlers/get-job-execution-by-execution-key.handler
  insertJobExecution:
    handler: handlers/insert-job-execution.handler
    description: Lambda that inserts the pending job execution into DynamoDB
  invokeServiceExecution:
    handler: handlers/invoke-service-execution.handler
    description: Lambda that calls the invocation_target with the event details
    environment:
      API_BASE:
        Fn::Join:
          - ""
          - - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
  updateAwaitCallbackActivityStatus:
    handler: handlers/update-await-callback-activity-status.handler
    description: Lambda that calls updates the task status for the AwaitCallback activity
  getActivityTaskToken:
    handler: handlers/get-activity-task-token.handler
    description: Attempts to retrieve the activity task token
    timeout: 90 # TODO: tune this
    environment:
      STEP_FUNCTION_ACTIVITY_ARN_AWAIT_CALLBACK: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:${self:custom.step_function_activity_name_await_callback}
  insertActivityTaskToken:
    handler: handlers/insert-activity-task-token.handler
    timeout: 30 # allow time for retries
  updateJobWithExecutionResults:
    handler: handlers/update-job-with-execution-results.handler
  updateJobExecutionWithResults:
    handler: handlers/update-job-execution-with-execution-results.handler

  # DynamoDB Stream handlers
  updateJobSchedule:
    handler: handlers/update-job-schedule.handler
    description: Lambda that receives the DynamoDb event when a job is updated, updates event rule
    environment:
      IAM_ROLE_ARN_CLOUDWATCH_EVENTS:
        Fn::GetAtt: [ IamRoleCloudWatchEvents, Arn ]
      SQS_QUEUE_ARN_JOB_EXECUTION_EVENTS:
        Fn::GetAtt: [ JobExecutionEventsFifoSqsQueue, Arn ]
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ JobsDynamoDbTable, StreamArn ]
          batchSize: 1

  # API handlers
  searchJobs:
    handler: handlers/api/search-jobs.handler
    description: Read endpoint for jobs
    environment:
      API_BASE:
        Fn::Join:
          - ""
          - - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    events:
      - http:
          path: jobs
          method: get
      - http:
          path: services/{serviceName}/jobs
          method: get
      - http:
          path: jobs
          method: post
      - http:
          path: services/{serviceName}/jobs
          method: post
  searchJobExecutions:
    handler: handlers/api/search-job-executions.handler
    description: Read endpoint for job executions
    environment:
      API_BASE:
        Fn::Join:
          - ""
          - - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    events:
      - http:
          path: executions
          method: get
      - http:
          path: services/{serviceName}/executions
          method: get
      - http:
          path: services/{serviceName}/jobs/{jobName}/executions
          method: get
      - http:
          path: executions
          method: post
      - http:
          path: services/{serviceName}/executions
          method: post
      - http:
          path: services/{serviceName}/jobs/{jobName}/executions
          method: post
  putJob:
    handler: handlers/api/put-job.handler
    description: Idempotent job create/update
    events:
      - http:
          path: services/{serviceName}/jobs/{jobName}
          method: put
  deleteJob:
    handler: handlers/api/delete-job.handler
    description: Idempotent job delete
    events:
      - http:
          path: services/{serviceName}/jobs/{jobName}
          method: delete
  serviceExecutionCallback:
    handler: handlers/api/service-execution-callback.handler
    description: Endpoint for services to call with job results, starts and execution of the ExecutionCallback state machine
    environment:
      STATE_MACHINE_ARN_EXECUTION_CALLBACK: ${self:resources.Outputs.ExecutionCallbackStateMachineARN.Value}
    events:
      - http:
          path: callback/{jobGuid}/{encodedJobExecutionKey}
          method: post
  mockHttpInvokeTarget:
    handler: handlers/api/mock-http-invoke-target.handler
    description: Endpoint for testing HTTP invoke target
    environment:
      LAMBDA_ARN_MOCK_DELAYED_CALLBACK: ${self:resources.Outputs.MockDelayedServiceExecutionCallbackLambdaFunctionARN.Value}
    events:
      - http:
          path: http-invoke
          method: post

stepFunctions:
  stateMachines:
    # putJobApiHandlerStepFunction:
    #   name: putJobApiHandler
    #   events:
    #     - http:
    #         path: services/{service_name}/jobs/{job_name}
    #         method: put
    #   definition:
    #     Comment:  Idempotent job create/update
    #     StartAt:
    #     PutJob:
    #       Type: Task
    #       Resource: ${self:custom.arn_prefix_lambda_function}-putJob
    #       End: true

    queueJobExecutionStepFunction:
      name: queueJobExecution
      definition:
        Comment: "Queue a job execution for the given CloudWatch Event Rule event"
        StartAt: AddToQueue
        States:
          AddToQueue:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage
            Parameters:
              QueueUrl: https://sqs.#{AWS::Region}.amazonaws.com/#{AWS::AccountId}/${self:custom.sqs_fifo_queue_name_job_execution_events}
              MessageBody.$: "$"
              MessageGroupId.$: "$.sqs.messageGroupId"
              MessageDeduplicationId.$: "$.jobExecution.event.id"
            ResultPath: "$.sqs.message"
            Next: WorkExecutionQueue
          WorkExecutionQueue:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-workExecutionQueue
            End: true
            # lambda that pulls the next job off the queue and inserts it into dynamodb
          #   Type: Choice
          #   Choices:
          #     - Variable: "$.exclusive"
          #       BooleanEquals: true
          #       Next: WorkExecutionQueue
          #     - Variable: "$.exclusive"
          #       BooleanEquals: false
          #       Next: WorkParallelExecutionQueue
          # WorkExclusiveExecutionQueue:
          #   Type: Task
          #   Resource: ${self:custom.arn_prefix_lambda_function}-workExclusiveExecutionQueue
          #   End: true
          # WorkParallelExecutionQueue:
          #   Type: Task
          #   Resource: ${self:custom.arn_prefix_lambda_function}-workParallelExecutionQueue
          #   End: true

    executeJobExecutionStepFunction:
      name: executeJobExecution
      definition:
        Comment: "Executes a job for the given CloudWatch Event Rule event"
        StartAt: GetLockIfExclusive
        States:
          GetLockIfExclusive:
            Type: Choice
            Choices:
              - Variable: "$.jobStatic.exclusive"
                BooleanEquals: true
                Next: GetJobLock
              - Variable: "$.jobStatic.exclusive"
                BooleanEquals: false
                Next: GetJob
          GetJobLock:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-getJobLock
            Retry:
            - ErrorEquals:
              - ConditionalCheckFailedException
              IntervalSeconds: 2
              MaxAttempts: 2
              BackoffRate: 2
            Next: InsertJobExecution
          GetJob:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-getJob
            Next: InsertJobExecution
          InsertJobExecution:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-insertJobExecution
            Next: Callback
          Callback:
            Type: Parallel
            Next: FinishCallback
            Branches:
              - StartAt: AwaitCallback
                States:
                  AwaitCallback:
                    Type: Task
                    Comment: Activity state that waits for the service to callback with job result
                    Resource: arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:activity:${self:custom.step_function_activity_name_await_callback}
                    HeartbeatSeconds: 60
                    End: true
              - StartAt: DelayForActivityStart
                States:
                  DelayForActivityStart:
                    Type: Wait
                    Comment: This may not be necessary
                    Seconds: 1
                    Next: GetActivityTaskToken
                  GetActivityTaskToken:
                    Type: Task
                    Comment: Task state function that polls once for an activity task token for the AwaitCallback activity
                    Resource: ${self:custom.arn_prefix_lambda_function}-getActivityTaskToken
                    Next: InsertActivityTaskToken
                  InsertActivityTaskToken:
                    Type: Task
                    Comment: If an activity task token was found, it is inserted onto the job execution record in DynamoDB
                    Resource: ${self:custom.arn_prefix_lambda_function}-insertActivityTaskToken
                    Next: LoopGetActivityTaskToken
                  LoopGetActivityTaskToken:
                    Type: Choice
                    Comment: Loops until the activity task token was found for the target job execution
                    Default: GetOutOfBandActivityTaskToken
                    Choices:
                      - Variable: "$.jobExecution.awaitCallbackTaskToken"
                        StringGreaterThan: ""
                        Next: InvokeServiceExecution
                  GetOutOfBandActivityTaskToken:
                    Type: Task
                    Comment: Checks if the activity task token was found by an out of band task function
                    Resource: arn:aws:states:::dynamodb:getItem
                    Parameters:
                      TableName: ${self:custom.dynamodb_table_name_job_executions}
                      Key.$: $.awaitCallbackActivity.jobExecutionKey
                    ResultPath: $.jobExecution.callbackTaskToken
                    OutputPath: $.Item.awaitCallbackTaskToken.S
                    Next: LoopGetActivityTaskToken
                  InvokeServiceExecution:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-invokeServiceExecution
                    End: true
          FinishCallback:
            Type: Parallel
            Next: EndExecution
            Branches:
              - StartAt: UpdateJobWithExecutionResults
                States:
                  UpdateJobWithExecutionResults:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-updateJobWithExecutionResults
                    End: true
              - StartAt: UpdateJobExecutionWithExecutionResults
                States:
                  UpdateJobExecutionWithExecutionResults:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-updateJobExecutionWithResults
                    End: true
          EndExecution:
            Type: Pass
            End: true

    executionCallbackStepFunction:
      name: executionCallback
      definition:
        Comment: Processes the results of a service's job execution
        StartAt: GetJobAndExecution
        States:
          GetJobAndExecution:
            Type: Parallel
            Next: UpdateAwaitCallbackActivityStatus
            Branches:
              - StartAt: GetJobKeyByGuid
                States:
                  GetJobKeyByGuid:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-getJobKeyByGuid
                    Next: GetJob
                  GetJob:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-getJob
                    End: true
              - StartAt: GetJobExecutionByExecutionKey
                States:
                  GetJobExecutionByExecutionKey:
                    Type: Task
                    Resource: ${self:custom.arn_prefix_lambda_function}-getJobExecutionByExecutionKey
                    End: true
          UpdateAwaitCallbackActivityStatus:
            Type: Task
            Resource: ${self:custom.arn_prefix_lambda_function}-updateAwaitCallbackActivityStatus
            End: true

  activities:
    - ${self:custom.step_function_activity_name_await_callback}

resources:
  Outputs:
    ExecuteJobExecutionStateMachineARN:
      Description: The ARN of the ExecuteJobExecution state machine
      Value:
        Ref: ExecuteJobExecution
    QueueJobExecutionStateMachineARN:
      Description: The ARN of the QueueJobExecution state machine
      Value:
        Ref: QueueJobExecution
    ExecutionCallbackStateMachineARN:
      Description: The ARN of the ExecutionCallback state machine
      Value:
        Ref: ExecutionCallback
    StartExecutionWithEventLambdaFunctionARN:
      Value:
        Fn::GetAtt: [ StartExecutionWithEventLambdaFunction, Arn ]
    MockDelayedServiceExecutionCallbackLambdaFunctionARN:
      Value:
        Fn::GetAtt: [ MockDelayedServiceExecutionCallbackLambdaFunction, Arn ]
  Resources:
    JobExecutionEventsFifoSqsQueue:
      Type: AWS::SQS::Queue # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
      Properties:
        QueueName: ${self:custom.sqs_fifo_queue_name_job_execution_events}
        ContentBasedDeduplication: true
        FifoQueue: true
        # MessageRetentionPeriod: 82800 # 23 hours
    JobsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb_table_name_jobs}
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: serviceName
            AttributeType: S
          - AttributeName: jobName
            AttributeType: S
          - AttributeName: guid
            AttributeType: S
        KeySchema:
          - AttributeName: serviceName
            KeyType: HASH
          - AttributeName: jobName
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.dynamodb_index_name_jobs_guid}
            KeySchema:
              - AttributeName: guid
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
          # - IndexName: ${self:custom.dynamodb_index_name_jobs_schedule}
          #   KeySchema:
          #     - AttributeName: schedule
          #       KeyType: HASH
          #     - AttributeName: service_job
          #       KeyType: RANGE
          #   Projection:
          #     ProjectionType: KEYS_ONLY
    JobExecutionsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb_table_name_job_executions}
        BillingMode: PAY_PER_REQUEST
        # StreamSpecification:
        #   StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: partitionKey
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
        KeySchema:
          # `${DATE}.${parseInt(eventId.replace(/[^0-9a-fA-F]/g, '').substr(-13),16) % DYNAMODB_PARTITION_COUNT_JOB_EXECUTIONS}`
          # exmaple: 20190321.1
          - AttributeName: partitionKey
            KeyType: HASH
          # `${serviceName}:${jobName}:${eventTimeMs}:${eventId}`
          - AttributeName: sortKey
            KeyType: RANGE
    IamRoleCloudWatchEvents:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                # - Effect: Allow
                #   Action:
                #     - sqs:SendMessage
                #   Resource:
                #     - Fn::GetAtt: [ JobExecutionEventsFifoSqsQueue, Arn ]
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource:
                    # - Ref: ExecuteJobExecution
                    - Ref: QueueJobExecution
                # - Effect: Allow
                #   Action:
                #     - lambda:InvokeFunction
                #   Resource:
                #     - Fn::GetAtt: [ StartExecutionWithEventLambdaFunction, Arn ]
        RoleName: ${self:custom.iam_role_name_cloudwatch_events}
